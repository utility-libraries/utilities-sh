#!/usr/bin/env python3
# -*- coding=utf-8 -*-
r"""
Used to fill a template
"""
import os
import re
import sys
import shlex
import textwrap
import fileinput
import typing as t
import datetime as dt


########################################################################################################################
# default variables
########################################################################################################################


DEFAULT_VARIABLES: t.Dict[str, str] = {
    "today": dt.date.today().isoformat(),
    "now": dt.datetime.now().isoformat(),
}


########################################################################################################################
# styles
########################################################################################################################


STYLE_BASH = re.compile(r'\$\{(?P<key>\$|\$?[\w-]+)(?::(?P<fmt>[^}]+))?}')  # ${key:fmt}
STYLE_DOUBLE = re.compile(r'\{\{(?P<key>\$|\$?[\w-]+)(?::(?P<fmt>[^}]+))?}}')  # {{key:fmt}}
STYLE_SINGLE = re.compile(r'\{(?P<key>\$|\$?[\w-]+)(?::(?P<fmt>[^}]+))?}')  # {key:fmt}

STYLES: t.Dict[str, re.Pattern] = {
    "DEFAULT": STYLE_BASH,
    "BASH": STYLE_BASH,
    "DOUBLE": STYLE_DOUBLE,
    "SINGLE": STYLE_SINGLE,
}


########################################################################################################################
# shell execute
########################################################################################################################


def shell_execute(*args: str) -> str:
    import subprocess
    result = subprocess.run(args, capture_output=True, check=True, text=True)
    return result.stdout


########################################################################################################################
# formatter
########################################################################################################################


def formatter_escape(value: str) -> str:
    return value.translate(
        str.maketrans({
            "\\": r"\\",
            "\"": r"\"",
            "\'": r"\'",
            "\n": r"\n",
            "\r": r"\r",
            "\t": r"\t",
            "\b": r"\b",
            "\f": r"\f",
        })
    )


def formatter_date(value: str, fmt: str = None) -> str:
    env_date_format = os.environ.get("TEMPLATE_REPLACE_STRPTIME", None)
    if re.fullmatch(r'\d+', value):
        date = dt.datetime.fromtimestamp(int(value))
    elif env_date_format is not None:
        date = dt.datetime.strptime(value, env_date_format)
    else:
        date = dt.datetime.fromisoformat(value)
    return date.strftime(fmt) if fmt else date.isoformat()


def formatter_align(value: str, direction: str, size: str, fill: str = ' ') -> str:
    fmt_func = {
        '<': str.ljust,
        'left': str.ljust,
        '=': str.center,
        'center': str.center,
        'middle': str.center,
        '>': str.rjust,
        'right': str.rjust,
    }[direction]
    return fmt_func(value, int(size), fill)


def formatter_dedent(value: str):
    return textwrap.dedent(value)


def formatter_indent(value: str, prefix: str = "\t"):
    return textwrap.indent(value, prefix=prefix)


def formatter_trim(value: str, side: str = "both") -> str:
    return {
        "both": str.strip,
        "left": str.lstrip,
        "right": str.rstrip,
    }[side](value)


def formatter_ltrim(value: str) -> str:
    # alias for <trim left>
    return value.lstrip()


def formatter_rtrim(value: str) -> str:
    # alias for <trim right>
    return value.rstrip()


FORMATTERS: t.Dict[str, t.Callable[[str, t.List[str]], str]] = {
    "\\": formatter_escape,
    "escape": formatter_escape,
    "date": formatter_date,
    "align": formatter_align,
    "dedent": formatter_dedent,
    "indent": formatter_indent,
    "trim": formatter_trim,
    "ltrim": formatter_ltrim,
    "rtrim": formatter_rtrim,
}


########################################################################################################################
# replacer
########################################################################################################################


def replacer(mapping: t.Dict[str, str]):
    def wrapped(match: re.Match) -> str:
        key = match.group('key')
        fmt = match.group('fmt')
        if key == "$":  # ${$:echo "Hello World"}
            if fmt is None:
                raise RuntimeError("missing command arguments")
            cmdargs = shlex.split(fmt)
            return shell_execute(*cmdargs)
        value = mapping[key]
        if fmt:
            name, *args = shlex.split(fmt)
            try:
                formatter = FORMATTERS[name]
            except KeyError:
                raise KeyError(f"unknown formatter {name!r}")
            value = formatter(value, *args)
        return str(value)
    return wrapped


########################################################################################################################
# mapping
########################################################################################################################


def get_mapping(argv: t.List[str] = None) -> t.Dict[str, str]:
    if argv is None:
        argv = sys.argv[1:]

    mapping = DEFAULT_VARIABLES.copy()
    mapping.update({
        f'${key}': value
        for key, value in os.environ.items()
    })

    current_key = None
    for arg in argv:
        if current_key is None and arg.startswith('--'):
            current_key = arg[2:]
        elif current_key is not None:
            mapping[current_key] = arg
            current_key = None
        else:
            raise RuntimeError("Bad command-line arguments supplied")

    return mapping


########################################################################################################################
# main
########################################################################################################################


def main(argv: t.List[str]):
    on_error = os.getenv('TEMPLATE_REPLACE_ERROR', default="STRICT").upper()
    if on_error not in {'STRICT', 'IGNORE'}:
        raise EnvironmentError(f"$TEMPLATE_REPLACE_ERROR {on_error!r} unknown ('STRICT' or 'IGNORE')")
    style = os.getenv('TEMPLATE_REPLACE_STYLE', default="DEFAULT").upper()
    pattern = STYLES.get(style)
    if pattern is None:
        raise EnvironmentError(f"$TEMPLATE_REPLACE_STYLE {style!r} unknown ({', '.join(STYLES.keys())})")
    mapping = get_mapping(argv)

    with fileinput.input(()) as f:
        for line_no, line in enumerate(f):
            try:
                formatted = re.sub(
                    pattern=pattern,
                    repl=replacer(mapping=mapping),
                    string=line
                )
            except Exception as error:
                sys.stderr.write(f"Error in line {line_no}: {type(error).__name__} ({error})\n")
                return 1
            else:
                sys.stdout.write(formatted)

    return 0


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]) or 0)
